# CRUD Quiz

Use the solution to this afternoon's Property Tracker lab to answer the following questions. Please write your answers under each question, push the file to GitHub, and submit in the usual way.

## MVP Questions

In our Property Tracker application:

Q1. Where are we instantiating instances of the `Property` class?
in the models folder, in the ruby file that I named properties.

Q2. Where are we defining the SQL that enables us to save the ruby `Property` object into the database?


Q3. In console.rb, which lines modify the database?
property_1.save
property_2.save

property_1.delete

property_2.value = '2000000.01'
property_2.update

property = Property.all()

Q4. Why do we not define the id of a `Property` object at the point we instantiate it (‘new it up’)?
Because it is the responsibilty of the database to create the id, not ours

Q5. Where and how do we assign the id (that is generated by the database) to the ruby `Property` object?
@id = db.exec_prepared("save", values)[0]['id'].to_i

Q6. Why do we put a guard (an `if` clause) on the `@id` attribute in the constructor?
So that there will only be an id created if data exists

Q7. Why are some of the CRUD actions represented by instance methods, and others by class methods?
dependant on the action (don't know how to explain)s

Q8. What type of data structure is returned by calls to `db.exec_prepared()`? In the `save` method, how do we access the id from the returned data structure?

Q9. Why do we use prepared statements when performing database operations?
we have installed a gem which allows us to perform these actions, someone has given us a wee helping hand

## Extension Questions

Look at the `find_by_id` and `find_by_address` methods in the `Property` class.

Q10. What do they take in as their arguments?

Q11. What are their return values?
